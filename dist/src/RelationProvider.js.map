{"version":3,"file":"RelationProvider.js","sourceRoot":"","sources":["../../src/RelationProvider.ts"],"names":[],"mappings":";AAAA,2BAA0F,UAAU,CAAC,CAAA;AACrG,6CAA8D,8BAA8B,CAAC,CAAA;AAC7F,MAAM,gBAAgB,GAAG,OAAO,CAAC,mBAAmB,CAAC,CAAC;AAEtD;IAII,YAAY,GAAQ;QAChB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAA;IAClB,CAAC;IAEO,eAAe,CAAC,QAAgB;QACpC,MAAM,IAAI,GACN,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAuB,KAAK,IAAI,CAAC,IAAI,IAAI,QAAQ,CAAC,CAAC;QAE5E,EAAE,CAAA,CAAC,CAAC,IAAI,CAAC;YAAC,MAAM,gBAAgB,GAAG,QAAQ,CAAC;QAC5C,MAAM,CAAC,IAAI,CAAA;IACf,CAAC;IAEO,0BAA0B,CAAC,WAAuC;QACtE,IAAI,SAAS,GAAsB,EAAE,CAAC;QAEtC,MAAM,IAAI,GAAG,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,QAAQ,CAAC,EACnD,EAAE,GAAG,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QAElD,MAAM,CAAA,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;YACtB,KAAK,gDAAmB,CAAC,QAAQ;gBAC7B,SAAS,CAAC,IAAI,CAAC,IAAI,2BAAgB,CAAC,IAAI,EAAE,EAAE,EAAE;oBAC1C,UAAU,EAAE,WAAW,CAAC,UAAU;oBAClC,SAAS,EAAE,WAAW,CAAC,SAAS;oBAChC,IAAI,EAAE,WAAW,CAAC,WAAW;iBAChC,CAAC,CAAC,CAAC;gBACJ,KAAK,CAAC;YACV,KAAK,gDAAmB,CAAC,SAAS,CAAC;YACnC,KAAK,gDAAmB,CAAC,UAAU;gBAC/B,SAAS,CAAC,IAAI,CAAC,IAAI,4BAAiB,CAAC,IAAI,EAAE,EAAE,EAAE;oBAC3C,UAAU,EAAE,WAAW,CAAC,UAAU;oBAClC,SAAS,EAAE,WAAW,CAAC,SAAS;oBAChC,IAAI,EAAE,WAAW,CAAC,WAAW;iBAChC,CAAC,CAAC,CAAC;gBACJ,KAAK,CAAC;YACV;gBACI,MAAM,8BAA8B,CAAC;QAC7C,CAAC;QAED,EAAE,CAAA,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC;YACpB,EAAE,CAAA,CAAC,WAAW,CAAC,IAAI,KAAK,gDAAmB,CAAC,UAAU,CAAC,CAAC,CAAC;gBACrD,SAAS,CAAC,IAAI,CAAC,IAAI,4BAAiB,CAAC,EAAE,EAAE,IAAI,EAAE;oBAC3C,SAAS,EAAE,WAAW,CAAC,UAAU;oBACjC,UAAU,EAAE,WAAW,CAAC,SAAS;oBACjC,IAAI,EAAE,WAAW,CAAC,YAAY;iBACjC,CAAC,CAAC,CAAC;YACR,CAAC;YACD,IAAI,CAAC,CAAC;gBACF,SAAS,CAAC,IAAI,CAAC,IAAI,2BAAgB,CAAC,EAAE,EAAE,IAAI,EAAE;oBAC1C,SAAS,EAAE,WAAW,CAAC,UAAU;oBACjC,UAAU,EAAE,WAAW,CAAC,SAAS;oBACjC,IAAI,EAAE,WAAW,CAAC,YAAY;iBACjC,CAAC,CAAC,CAAC;YACR,CAAC;QACL,CAAC;QAED,MAAM,CAAC,SAAS,CAAA;IACpB,CAAC;IAED,OAAO,CAAC,QAAoD;QACxD,EAAE,CAAA,CAAC,QAAQ,YAAY,uDAA0B,CAAC,CAAC,CAAC;YAChD,IAAI,CAAC,0BAA0B,CAAC,QAAQ,CAAC;iBACpC,OAAO,CAAC,CAAC,QAAyB,KAAK,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAA;QAC5E,CAAC;QACD,IAAI,CAAC,CAAC;YACF,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAA;QAC/B,CAAC;IACL,CAAC;IAED,UAAU,CAAC,IAAY;QACnB,gBAAgB,CAAC,MAAM,EAAE,IAAI,EAAE;YAC3B,OAAO,EAAE,QAAQ;YACjB,KAAK,EAAE,CAAC,QAAoD;gBACxD,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAA;YAC1B,CAAC;SACJ,CAAC,CAAC;IACP,CAAC;AAEL,CAAC;AAjFY,wBAAgB,mBAiF5B,CAAA","sourcesContent":["import {Api,ApiEdgeRelation, OneToOneRelation, OneToManyRelation, ApiEdgeDefinition} from \"api-core\";\nimport {ApiEdgeRelationDescription, ApiEdgeRelationType} from \"./ApiEdgeRelationDescription\";\nconst requireDirectory = require(\"require-directory\");\n\nexport class RelationProvider {\n\n    private api: Api;\n\n    constructor(api: Api) {\n        this.api = api\n    }\n\n    private processEdgeName(edgeName: string): ApiEdgeDefinition {\n        const edge: ApiEdgeDefinition|undefined =\n            this.api.edges.find((edge: ApiEdgeDefinition) => edge.name == edgeName);\n\n        if(!edge) throw \"Missing Edge: \" + edgeName;\n        return edge\n    }\n\n    private processRelationDescription(description: ApiEdgeRelationDescription): ApiEdgeRelation[] {\n        let relations: ApiEdgeRelation[] = [];\n\n        const from = this.processEdgeName(description.fromName),\n            to = this.processEdgeName(description.toName);\n\n        switch(description.type) {\n            case ApiEdgeRelationType.OneToOne:\n                relations.push(new OneToOneRelation(from, to, {\n                    relationId: description.relationId,\n                    relatedId: description.relatedId,\n                    name: description.relatedName\n                }));\n                break;\n            case ApiEdgeRelationType.OneToMany:\n            case ApiEdgeRelationType.ManyToMany:\n                relations.push(new OneToManyRelation(from, to, {\n                    relationId: description.relationId,\n                    relatedId: description.relatedId,\n                    name: description.relatedName\n                }));\n                break;\n            default:\n                throw \"Unsupported Description Type\";\n        }\n\n        if(description.twoWay) {\n            if(description.type === ApiEdgeRelationType.ManyToMany) {\n                relations.push(new OneToManyRelation(to, from, {\n                    relatedId: description.relationId,\n                    relationId: description.relatedId,\n                    name: description.relationName\n                }));\n            }\n            else {\n                relations.push(new OneToOneRelation(to, from, {\n                    relatedId: description.relationId,\n                    relationId: description.relatedId,\n                    name: description.relationName\n                }));\n            }\n        }\n\n        return relations\n    }\n\n    include(relation: ApiEdgeRelation|ApiEdgeRelationDescription) {\n        if(relation instanceof ApiEdgeRelationDescription) {\n            this.processRelationDescription(relation)\n                .forEach((relation: ApiEdgeRelation) => this.api.relation(relation))\n        }\n        else {\n            this.api.relation(relation)\n        }\n    }\n\n    includeDir(path: string) {\n        requireDirectory(module, path, {\n            include: '/.js$/',\n            visit: (relation: ApiEdgeRelation|ApiEdgeRelationDescription) => {\n                this.include(relation)\n            }\n        });\n    }\n\n}\n"]}